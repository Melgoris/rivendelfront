import {createSlice, createAsyncThunk} from '@reduxjs/toolkit'
import axios from '../../assets/axiosData/mongoDb'
import {fetchCards} from './cards'

export const addNewColumn = createAsyncThunk(
  'columns/addNewColumn',
  async (nameCol, {rejectWithValue}) => {
    try {
      const {data} = await axios.post('/columns', {name: nameCol})
      return data
    } catch (error) {
      return rejectWithValue(error.message || 'Произошла ошибка')
    }
  },
)
export const deleteColumnFromDb = createAsyncThunk(
  'columns/deleteColumnFromDb',
  async (colId, {rejectWithValue, dispatch}) => {
    try {
      await axios.post(`/columns/${colId}`)
      await dispatch(fetchCards())
      await dispatch(fetchColumns())

      return colId
    } catch (error) {
      return rejectWithValue(error.message || 'Произошла ошибка')
    }
  },
)
export const fetchColumns = createAsyncThunk(
  'columns/fetchColumns',
  async (_, {rejectWithValue}) => {
    try {
      const {data} = await axios.get('/columns')
      return data
    } catch (error) {
      return rejectWithValue(error.message || 'Ошибка загрузки колонок')
    }
  },
)
export const addCardToColumn = createAsyncThunk(
  'columns/addCardToColumn',
  async ({columnId, cardId}, {rejectWithValue}) => {
    try {
      await axios.post(`/columns/${columnId}/add-card`, {cardId})
      return {columnId, cardId}
    } catch (error) {
      return rejectWithValue(error.message || 'Ошибка добавления карточки')
    }
  },
)
export const removeCardFromColumn = createAsyncThunk(
  'columns/removeCardFromColumn',
  async ({columnId, cardId}, {rejectWithValue}) => {
    try {
      await axios.post(`/columns/${columnId}/remove-card`, {cardId})
      return {columnId, cardId}
    } catch (error) {
      return rejectWithValue(error.message || 'Ошибка удаления карточки')
    }
  },
)

export const fillColumnWithCharacters = createAsyncThunk(
  'columns/autoGenerateData',
  async ({columnId, fillChars, pureChars}, {rejectWithValue, dispatch}) => {
    try {
      await axios.post(`/columns/${columnId}/auto-generate`, {
        numTotal: fillChars,
        numPure: pureChars,
      })
      await dispatch(fetchCards())
      await dispatch(fetchColumns())
    } catch (error) {
      return rejectWithValue(error.message || 'Не получилось собрать ансейв')
    }
  },
)

const initialState = {
  collumns: [],
  status: 'idle',
  error: null,
}

const columnSlice = createSlice({
  name: 'columns',
  initialState,
  reducers: {},
  extraReducers: bilder => {
    const setLoading = state => {
      state.status = 'loading'
    }
    const setError = (state, action) => {
      state.status = 'error'
      state.error = action.error?.message || 'неизвесная ошибка'
    }
    bilder
      .addCase(addNewColumn.pending, setLoading)
      .addCase(addNewColumn.fulfilled, (state, action) => {
        // state.collumns = [...state.collumns, {...action.payload}]
        state.status = 'loaded'
      })
      .addCase(addNewColumn.rejected, setError)
      .addCase(fetchColumns.pending, setLoading)
      .addCase(fetchColumns.fulfilled, (state, action) => {
        state.collumns = action.payload
        state.status = 'loaded'
      })
      .addCase(fetchColumns.rejected, setError)
      .addCase(addCardToColumn.pending, setLoading)
      .addCase(addCardToColumn.fulfilled, (state, action) => {
        state.status = 'loaded'
      })
      .addCase(addCardToColumn.rejected, setError)
      .addCase(deleteColumnFromDb.pending, setLoading)
      .addCase(deleteColumnFromDb.fulfilled, (state, action) => {
        state.status = 'loaded'
      })
      .addCase(deleteColumnFromDb.rejected, setError)
  },
})

export const columnReducer = columnSlice.reducer
